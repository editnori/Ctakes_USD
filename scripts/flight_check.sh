#!/usr/bin/env bash\nset -euo pipefail\n\nBASE_DIR="$(cd "$(dirname "$0")/.." && pwd)"\nENV_FILE="${BASE_DIR}/.ctakes_env"\nif [[ -f "${ENV_FILE}" ]]; then\n  # shellcheck disable=SC1090\n  source "${ENV_FILE}"\nfi\n\nDEFAULT_FLIGHT_UMLS_KEY="6370dcdd-d438-47ab-8749-5a8fb9d013f2"\n\nwrite_env_var() {\n  local var="$1"\n  local value="$2"\n  local tmp="${ENV_FILE}.tmp"\n  if [[ -f "${ENV_FILE}" ]]; then\n    awk -v var="$var" '!( $0 ~ "^[[:space:]]*export[[:space:]]+"var"=" )' "${ENV_FILE}" > "${tmp}"\n  else\n    : > "${tmp}"\n  fi\n  printf 'export %s=%q\n' "$var" "$value" >> "${tmp}"\n  mv "${tmp}" "${ENV_FILE}"\n  echo "[flight_check] Persisted ${var} to ${ENV_FILE}"\n}\n\nmaybe_prompt_env_var() {\n  local var="$1"\n  local value="$2"\n  local prompt="$3"\n  local desired existing\n  desired=$(printf %q "$value")\n  if [[ -f "${ENV_FILE}" ]]; then\n    existing=$(grep -E "^[[:space:]]*export[[:space:]]+${var}=" "${ENV_FILE}" | tail -n1 2>/dev/null || true)\n    if [[ "$existing" == "export ${var}=${desired}" ]]; then\n      return\n    fi\n  fi\n  if [[ ! -t 0 || ! -t 1 ]]; then\n    return\n  fi\n  read -r -p "${prompt}" reply\n  if [[ "$reply" =~ ^[Yy] ]]; then\n    write_env_var "$var" "$value"\n    export "$var"="$value"\n  fi\n}\n\nensure_default_umls_key() {\n  if [[ -n "${UMLS_KEY:-}" ]]; then\n    return\n  fi\n  if [[ -f "${ENV_FILE}" ]]; then\n    if grep -qE "^[[:space:]]*export[[:space:]]+UMLS_KEY=" "${ENV_FILE}"; then\n      return\n    fi\n  fi\n  write_env_var UMLS_KEY "${DEFAULT_FLIGHT_UMLS_KEY}"\n  export UMLS_KEY="${DEFAULT_FLIGHT_UMLS_KEY}"\n}\n\nISSUES=0\n\nBASH_BIN="${BASH:-bash}"\nRUN_PIPELINE="${BASE_DIR}/scripts/run_pipeline.sh"\nWARNINGS=0\n\nnote_ok()   { echo "[ok] $1"; }\nnote_warn() { echo "[warn] $1"; (( WARNINGS++ )) || true; }\nnote_fail() { echo "[fail] $1"; (( ISSUES++ )); }\n\n# Java -----------------------------------------------------------------------\nif command -v java >/dev/null 2>&1; then\n  JAVA_VERSION_RAW=$(java -version 2>&1 | head -n1)\n  JAVA_MAJOR=$(java -version 2>&1 | awk -F'[ "]+' 'NR==1 {print $3}' | awk -F'.' '{print $1}')\n  if [[ -n "${JAVA_MAJOR}" && ${JAVA_MAJOR} -ge 11 ]]; then\n    note_ok "Java ${JAVA_VERSION_RAW}"\n  else\n    note_warn "Java appears to be <11 (${JAVA_VERSION_RAW:-unknown})."\n  fi\nelse\n  note_fail "java not found on PATH. Install Java 11+ before running pipelines."\nfi\n\n# cTAKES home ----------------------------------------------------------------\nBUNDLED_CTAKES="${BASE_DIR}/CtakesBun-bundle/apache-ctakes-6.0.0-bin/apache-ctakes-6.0.0"\nBUNDLED_CTAKES_ALT="${BASE_DIR}/Ctakes_USD_clean/CtakesBun-bundle/apache-ctakes-6.0.0-bin/apache-ctakes-6.0.0"\nCTAKES_ROOT="${CTAKES_HOME:-}"\nif [[ -z "${CTAKES_ROOT}" ]]; then\n  if [[ -d "${BUNDLED_CTAKES}" ]]; then\n    note_warn "CTAKES_HOME not set; using bundled ${BUNDLED_CTAKES}. Export CTAKES_HOME for scripts."\n    CTAKES_ROOT="${BUNDLED_CTAKES}"\n  elif [[ -d "${BUNDLED_CTAKES_ALT}" ]]; then\n    note_warn "CTAKES_HOME not set; using bundled ${BUNDLED_CTAKES_ALT}. Export CTAKES_HOME for scripts."\n    CTAKES_ROOT="${BUNDLED_CTAKES_ALT}"\n  else\n    note_fail "CTAKES_HOME not set and no bundled distribution found at ${BUNDLED_CTAKES} (run scripts/get_bundle.sh)."\n  fi\nfi\n\nif [[ -n "${CTAKES_ROOT}" ]]; then\n  maybe_prompt_env_var CTAKES_HOME "${CTAKES_ROOT}" "Persist CTAKES_HOME=${CTAKES_ROOT} to ${ENV_FILE} for future runs? [y/N] "\n  if [[ -d "${CTAKES_ROOT}" ]]; then\n    note_ok "Using CTAKES_HOME=${CTAKES_ROOT}"\n    [[ -d "${CTAKES_ROOT}/lib" ]] || note_fail "${CTAKES_ROOT} does not contain a lib/ directory."\n  else\n    note_fail "CTAKES_HOME=${CTAKES_ROOT} does not exist"\n  fi\nfi\n\nensure_default_umls_key\n\n# Pipeline sanity ------------------------------------------------------------\nfor key in core sectioned smoke core_sectioned_smoke drug; do\n  case "$key" in\n    core_sectioned_smoke) p="${BASE_DIR}/pipelines/combined/"*; friendly="pipelines/combined";;\n    *) p="${BASE_DIR}/pipelines/${key}/"*; friendly="pipelines/${key}";;\n  esac\n  if compgen -G "$p" >/dev/null 2>&1; then\n    note_ok "Pipeline files present for ${key}"\n  else\n    note_fail "Missing pipeline definitions under ${friendly}"\n  fi\ndone\n\n# Tools check ----------------------------------------------------------------\nif ls "${BASE_DIR}/tools"/*.java >/dev/null 2>&1; then\n  note_ok "Java tools present (dictionary + helpers)"\nelse\n  note_warn "No Java tools found under tools/."\nfi\n\n# Samples --------------------------------------------------------------------\nSAMPLES_DIR="${BASE_DIR}/samples/mimic"\nif [[ -d "${SAMPLES_DIR}" ]]; then\n  COUNT=$(find "${SAMPLES_DIR}" -type f -name '*.txt' | wc -l | awk '{print $1}')\n  note_ok "Found ${COUNT} sample note(s) under samples/mimic"\nelse\n  note_warn "samples/mimic missing. Restore the sample notes if you rely on the smoke test."\nfi\n\n# Dry run --------------------------------------------------------------------\nif [[ ${ISSUES} -eq 0 && ${COUNT:-0} -gt 0 ]]; then\n  if [[ ! -f "${RUN_PIPELINE}" ]]; then\n    note_warn "scripts/run_pipeline.sh missing; skipping dry run"\n  else\n    DRY_RUN_OUTPUT=$("${BASH_BIN}" "${RUN_PIPELINE}" --dry-run --pipeline sectioned --input "${SAMPLES_DIR}" --output "${BASE_DIR}/outputs/flight_check" 2>&1)\n    if [[ $? -eq 0 ]]; then\n      note_ok "run_pipeline.sh dry run succeeded"\n      if [[ -n "${DRY_RUN_OUTPUT}" ]]; then\n        while IFS= read -r line; do\n          case "${line}" in\n            "[pipeline] Autoscale recommends "*|"[async] autoscale -> "*)\n              echo "    ${line}"\n              ;;\n          esac\n        done <<< "${DRY_RUN_OUTPUT}"\n      fi\n    else\n      note_warn "run_pipeline.sh dry run could not execute (ensure the default dictionary exists)"\n      if [[ -n "${DRY_RUN_OUTPUT}" ]]; then\n        echo "${DRY_RUN_OUTPUT}" >&2\n      fi\n    fi\n  fi\nfi\n\nif [[ ${ISSUES} -eq 0 ]]; then\n  if [[ ${WARNINGS} -eq 0 ]]; then\n    echo "[summary] Flight check passed."\n  else\n    echo "[summary] Flight check completed with ${WARNINGS} warning(s)."\n  fi\n  exit 0\nelse\n  echo "[summary] Flight check failed with ${ISSUES} issue(s)." >&2\n  exit 1\nfi\n\n
